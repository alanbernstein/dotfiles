# -*- mode: python -*-
# echo this filename
import os
try:
    print('executing %s' % os.path.realpath(__file__))
except Exception as e:
    print(e)

print('`from __future__ import division` to default float division')

## common standard library imports
print('')
from datetime import datetime as dt
print('from datetime import datetime as dt')
import sys, os, glob, re, subprocess, json, datetime, random
print('import sys, os, glob, re, subprocess, json, datetime, random')
from collections import namedtuple, defaultdict, Counter
print('from collections import namedtuple, defaultdict, Counter')
from itertools import product
print('from itertools import product')
from math import *
print('from math import *')

#print(sys.path)

## common pip imports
print('')
try:
    from dateutil.parser import parse
    print('from dateutil.parser import parse')
except:
    print('dateutil not available!')

try:
    import numpy as np
    print('import numpy as np')
except:
    print('numpy not available!')

try:
    import warnings
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        import matplotlib.pyplot as plt
    print('import matplotlib.pyplot as plt')
except:
    print('matplotlib not available!')

# try:
#     from pylab import *
#     print('from pylab import *')
# except:
#     print('pylab not available!')


# personal custom imports
# todo:
# - site uploader
# - time utils
# - debug/annotate decorators
# - varinfo
# - size
# - console plotter

print('')
try:
    # from panda.utils import clc
    # from panda.utils import epoch_to_datestr, datestr_to_epoch
    from panda.sci_utils import ar
    # from panda.plot_utils import qplot

    from panda.debug import debug, pp, jprint
    print('from panda.debug import (debug,  # ipdb.set_trace')
    print('                         pp,     # pprint.pprint')
    print('                         jprint,')
    print('                         pm      # post-mortem debug decorator')

except Exception as e:
    print('panda.* error -  ')
    print(e)


try:
    from qr import qr
    print('from qr import qr')
except:
    raise
    print('qr not available!')


# detect interactive/executable, and/or which interpreter
# (python, ipython, bpython)
import inspect
stk = inspect.stack()
if len(stk) > 3 and stk[3] is list and len(stk[3] > 1) and 'bpython' in stk[3][1]:
    __BPYTHON__ = True
# __IPYTHON__ defined in ipython


# enable tab completion
# http://www.farmckon.net/2009/08/rlcompleter-how-do-i-get-it-to-work/
try:
    import readline  # !!
except ImportError:
    try:
        import pyreadline as readline
        # throw open a browser if we fail both readline and pyreadline
    except ImportError:
        import webbrowser
        webbrowser.open(
            "http://ipython.scipy.org/moin/PyReadline/Intro#line-36")
        # throw open a browser
        # pass
    else:
        import rlcompleter  # !!
        if sys.platform == 'darwin':
            readline.parse_and_bind("bind ^I rl_complete")
        else:
            readline.parse_and_bind("tab: complete")  # !!
